[{"content":"看完了玉子市场和玉子爱情故事，非常好看，所以我推荐它们。\n但是，一回想起现实世界后，才明白这故事情节和人物形象也太虚幻了，至少对我来说是这样。 ","permalink":"https://zhxqian3.github.io/2023/2023-09-15/","summary":"看完了玉子市场和玉子爱情故事","title":"2023-09-15"},{"content":"今天去报道，又走进那破旧的院楼，已经过了三年的学习测绘导航的生活了，在此我想表达一下我对测绘导航的感受，还好我的英语水平可以很好的概括一下这个感受，那就是：Fuck GNSS!\n","permalink":"https://zhxqian3.github.io/2023/2023-09-10/","summary":"艹，变成大四老东西了","title":"开学了"},{"content":"相关网址\nsudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key\u0026#39; | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt\u0026#39; | sudo tee /etc/apt/sources.list.d/caddy-stable.list sudo apt update sudo apt install caddy Last update:2023-9-9\n","permalink":"https://zhxqian3.github.io/notes/install-caddy-on-debian/","summary":"如题","title":"在debian上安装caddy"},{"content":"安装 snap sudo apt update sudo apt install snapd 注销并重新登录，或重新启动系统，以确保正确更新 snap 的路径。\nreboot 在此之后，安装coresnap 以获得最新的snapd\nsudo snap install core 显示： core 16-2.45.2 from Canonical✓ installed\n要测试您的系统，请安装hello-world snap 并确保它正确运行\nsudo snap install hello-world 显示： hello-world 6.3 from Canonical✓ installed\nhello-world 显示： Hello World!\n删除 certbot-auto 和任何 Certbot 操作系统包 sudo apt-get remove certbot 安装 Certbot sudo snap install --classic certbot 准备 Certbot 命令 sudo ln -s /snap/bin/certbot /usr/bin/certbot 获取并安装证书 sudo certbot certonly --standalone 测试自动续订 sudo certbot renew --dry-run 续订 certbot 的命令安装在以下位置之一：\n/etc/crontab/ /etc/cron.*/* systemctl list-timers Last update:2023-9-9\n","permalink":"https://zhxqian3.github.io/notes/cerbot-use/","summary":"。。","title":"使用certbot申请ssl证书"},{"content":"Debian10 / 11 默认的内核就是 4.19 版本的内核而且编译了 TCP BBR 模块，所以可以直接通过参数开启。\necho net.core.default_qdisc=fq \u0026gt;\u0026gt; /etc/sysctl.conf echo net.ipv4.tcp_congestion_control=bbr \u0026gt;\u0026gt; /etc/sysctl.conf sysctl -p 检查是否成功：\nsysctl net.ipv4.tcp_available_congestion_control 显示：\nnet.ipv4.tcp_available_congestion_control = bbr cubic reno 表示开启成功。\n或执行 lsmod | grep bbr ，检测 BBR 是否开启。\nlsmod | grep bbr lsmod | grep fq 返回tcp_bbr和sch_fq\n重启\nreboot 查看版本内核\nuname -r -v 显示操作系统的版本\n","permalink":"https://zhxqian3.github.io/notes/open-bbr-on-debian/","summary":"。。。","title":"在debian上开启bbr"},{"content":"使用apt安装 设置存储库 若安装过，先卸载旧版本:\nfor pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done 设置 Docker 的 Apt 存储库：\n# Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=\u0026#34;$(dpkg --print-architecture)\u0026#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update 安装 sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugins 升级 Docker 引擎 sudo apt update 卸载 sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras sudo rm -rf /var/lib/docker sudo rm -rf /var/lib/containerd 您必须手动删除任何编辑的配置文件。\n相关网址\nLast update:2023-9-9\n","permalink":"https://zhxqian3.github.io/notes/install-docker-on-debian/","summary":"如题。","title":"在debian上安装docker"},{"content":"创建要作为swap分区的文件:增加512MB大小的交换分区，则命令写法如下，其中的count等于想要的块的数量（bs*count=文件大小）\ndd if=/dev/zero of=/tmp/big_swap bs=1M count=512 目录空间大小\ndu -sh /tmp/big_swap 格式化为交换分区文件\nchmod 0600 /tmp/big_swap mkswap /tmp/big_swap 启用交换分区文件:\nswapon /tmp/big_swap 使系统开机时自启用，在文件/etc/fstab中添加一行\n/tmp/big_swap swap swap defaults 0 0 重启\nreboot 关闭某个分区\nswapoff /tmp/big_swap ","permalink":"https://zhxqian3.github.io/notes/increase-virtual-memory-for-linux/","summary":"如题。","title":"linux增加虚拟内存"},{"content":"用户模式下的目录 ~/.config/systemd/user/ 系统模式下的目录 /usr/lib/systemd/system/ ：软件包安装的单元 /etc/systemd/system/ ：系统管理员安装的单元 简单设置(用户模式) [Unit] Description=Foo [Service] ExecStart=/usr/sbin/foo-daemon [Install] WantedBy=default.target 简单设置(系统模式) [Unit] Description=Foo [Service] ExecStart=/usr/sbin/foo-daemon [Install] WantedBy=multi-user.target 定时任务 后缀名为.timer的单元文件。 对应的.service文件中不需要包含 [Install] 部分，因为这由timer单元接管。 简单示例(单调定时器) 定义一个在系统启动 15 分钟后执行，且之后每3天都执行一次的定时器：\n[Unit] Description=Run foo weekly and on boot [Timer] OnBootSec=15min OnUnitActiveSec=3d [Install] WantedBy=timers.target 时间单位：\nusec, us, µs msec, ms seconds, second, sec, s minutes, minute, min, m hours, hour, hr, h days, day, d weeks, week, w months, month, M (defined as 30.44 days) ears, year, y (defined as 365.25 days) 简单示例(实时定时器) 定义一个每周执行一次（具体来讲，指周一凌晨零点）的定时器。如果上次未执行（比如说系统当时没有开机，这个行为由 Persistent=true 定义）就立即执行服务。\n[Unit] Description=Run foo weekly [Timer] OnCalendar=weekly Persistent=true [Install] WantedBy=timers.target 每天到点运行：\n[Unit] Description=Run foo service at 16:00 every day [Timer] OnCalendar=*-*-* 16:00:00 Persistent=true [Install] WantedBy=timers.target 常用命令解释 寻找错误 通过 systemd 寻找启动失败的服务: systemctl --state=failed 或者使用 systemd 消息:\njournalctl -fp err 我们发现了启动失败的 systemd-modules-load 服务. 我们想知道更多信息: systemctl status systemd-modules-load 如果没列出 Process ID, 通过 systemctl 重新启动失败的服务 ( 例如 systemctl restart systemd-modules-load ) 3. 现在得到了 PID ,你就可以进一步探查错误的详细信息了.通过下列的命令收集日志,PID 参数是你刚刚得到的 Process ID (例如 15630):\njournalctl -b _PID=15630 修改错误后重新启动服务，看是否正常运行。\n==若为用户模式==： 若调取日志，则要指定一个单位，可以使用：\njournalctl --user-unit myunit.service 或者，等效地：\njournalctl --user -u myunit.service 注意： journald 不会为 UID 低于 1000 的用户编写用户日志，而是将所有内容定向到系统日志。\n","permalink":"https://zhxqian3.github.io/notes/systemd/","summary":"个人关于systemd的使用笔记","title":"Systemd"},{"content":"systemd 提供了自己的日志系统（logging system），称为 journal。使用 systemd 日志，无需额外安装日志服务（syslog）。使用 journalctl(1) 命令读取日志。\nArch Linux 中， /var/log/journal/ 目录是 systemd包 软件包的一部分。默认情况下 /etc/systemd/journald.conf 中的Storage= 为 auto，systemd 会将日志记录写入 /run/systemd/journal。若被删除，systemd 不会自动创建此目录，而是将日志写入 /run/systemd/journal，重启时内容会消失。如果 journald.conf 中的 Storage=persistent， systemd-journald.service 重启 或系统重启时会重新创建 /var/log/journal/。\n过滤输出 显示本次启动后的所有日志： journalctl -b journalctl -b -0 显示本次启动的信息 journalctl -b -1 显示上次启动的信息 journalctl -b -2 显示上上次启动的信息\n只显示错误、冲突和重要告警信息： journalctl -p err..alert 显示特定进程的所有消息： journalctl _PID=1 显示指定单元的所有消息： journalctl -u man-db.service 日志大小限制 如果按上面的操作保留日志的话，默认日志最大限制为所在文件系统容量的 10%，即：如果 /var/log/journal 储存在 50GiB 的根分区中，那么日志最多存储 5GiB 数据。用 systemd-journald 日志查看当前设置:\njournalctl -b -u systemd-journald 可以修改配置文件指定最大限制。如限制日志最大 50MiB：\n/etc/systemd/journald.conf +++++++++++++++++++++++++++ SystemMaxUse=50M 还可以通过配置片段而不是全局配置文件进行设置：\n/etc/systemd/journald.conf.d/00-journal-size.conf +++++++++++++++++++++++++++++++++++++++++++++++++ [Journal] SystemMaxUse=50M 修改配置后要立即生效，请重启 systemd-journald.service 服务。\n手动清理日志 /var/log/journal 存放着日志, rm 应该能工作. 或者使用journalctl, 例如:\n清理日志使总大小小于 100M: journalctl --vacuum-size=100M 清理最早两周前的日志： journalctl --vacuum-time=2weeks ","permalink":"https://zhxqian3.github.io/notes/journalctl/","summary":"个人关于journalctl的使用笔记","title":"Journalctl"},{"content":"diskpart list disk select disk n attributes disk clear readonly clean create partition primary format fs=ntfs exit ","permalink":"https://zhxqian3.github.io/notes/format-write-protected-disk/","summary":"在windows中格式化写保护磁盘","title":"格式化写保护磁盘"},{"content":"管理员 PowerShell 在开始菜单的windows搜索中输入powershell 。查找带有“ Windows PowerShell ”标签的蓝色图标，右键单击该图标并在上下文菜单中选择“以管理员身份运行” 。\n将 EFI/系统分区挂载为卷 要在给定的驱动器上挂载 EFI 系统分区，请使用/S参数使用mountvol 命令。您可以选择任何您想要的免费驱动器号。举些例子”。\nmountvol S: /S 访问挂载卷 现在分区已挂载。我们可以通过cd 命令和驱动器号 S: 作为参数更改为驱动器来访问已安装的卷\ncd S: 为确保我们位于该卷的根目录，我们应该执行：\ncd \\ 我们现在可以使用dir 命令列出当前路径下的目录，以确保我们确实在 UFI 分区驱动器上。\ndir 输出应与此类似：\nDirectory: S:\\ Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 2019-01-17 12:55 EFI -a---- 2018-10-16 10:57 31 startup.nsh 删除引导加载程序 您的引导加载程序位于EFI目录中。使用cd 命令更改为它并通过dir 命令列出条目。\ncd .\\EFI\\ dir 您的输出取决于您安装的引导加载程序，这里是Windows 和 Ubuntu 的示例。\nDirectory: S:\\EFI Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 2018-12-06 06:55 Ubuntu d----- 2018-12-05 05:21 Microsoft d----- 2019-01-17 12:55 Boot 现在您可以通过命令 Remove-Item和参数 -Recurse删除不需要的加载程序。\n不要删除引导目录或 WINDOWS 目录！\nRemove-Item -Recurse .\\ubuntu 参考来源\n","permalink":"https://zhxqian3.github.io/notes/delete-startup-items-except-windows/","summary":"删除windows以外的系统引导程序","title":"删除双系统引导程序"},{"content":"本人是一个小垃圾，第一篇post就记下2021年夏天遇见的那个女生吧，虽然到现在都没有相互认识，但她对我影响却很大，可能是蓦然回首的那一瞬间吧，曾经激励着我努力奋斗，达到目标后就去接近她，虽然那个小目标达到了，但我却仍没有去找她（主要是没有勇气）。。\nemmm，就这样吧，感谢她让我不会变得比现在还垃圾。最后，祝你和我的未来都能变好，小芊。\n","permalink":"https://zhxqian3.github.io/2023/my-first-post/","summary":"我的第一篇post","title":"My First Post"}]